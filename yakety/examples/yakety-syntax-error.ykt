#! /usr/bin/env ykt

# This file is nearly like yackety.ykt, except it contains this comment and a
# syntax error.

# The following describes Yakety's language specification language, and can be
# used to generate a parser that will parse such specifications.

################################################################################

!start ebnf                   # not strictly necessary
!ignore /[ \t\r\n]+/          # skip whitespace between terminals
!ignore /#[^\n]*/             # comments begin with '#' and extend to line's end

# A language spec has two sections, directives and rules:

ebnf             : directives rules

# Directives are prefixed by a '!'; recognized directives are 'ignore' and
'start':

directives       : {directive}
directive        : '!' (ignore_directive | start_directive)

# An ignore directive indicates a sequence to ignore when scanning for the next
# terminal.

ignore_directive : 'ignore' REGEX

# A start directive indicates the start symbol for the grammar. In the absence
# of a start directive, the start symbol defaults to the first symbol defined.
					 
start_directive  : 'start' IDENTIFIER

################################################################################

# The rules section is fairly conventional EBNF, both defined and demonstrated
# here.

rules            : {rule}
rule             : IDENTIFIER ':' productions

IDENTIFIER       : /[a-zA-Z_][a-zA-Z0-9_]*/

productions      : production {'|' production}
production       : {substitution}

substitution     : repeated 
                 | optional 
                 | enclosed 
                 | reference 
                 | STRING_LITERAL 
                 | REGEX
		 
enclosed         : '(' productions ')'
repeated         : '{' productions '}'
optional         : '[' productions ']'

reference        : IDENTIFIER

STRING_LITERAL   : /'(\.|[^'])*'/

# Technically, trying to match regular expressions with regular expressions is a
# bug, since regular expressions cannot describe regular expressions (think
# nested parentheses and the pumping lemma). Nevertheless, Yakety does not (yet)
# have a facility for sub-grammars or the like, so this is what we've come to.
# Also, this regex does not match exactly the one appearing in Yakety itself.
# After some experimentation, it was simply more convenient to use '\x2f' rather
# than '/' here than to come up with a regex that would work unmodified both
# here and in the Python.

REGEX            : /\x2f(\\.|[^\x2f])+\x2f/

